<?xml version="1.0" encoding="UTF-8"?>
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">
	<!--
		| This bean declares our AuthenticationManager.  The CentralAuthenticationService service bean
		| declared in applicationContext.xml picks up this AuthenticationManager by reference to its id, 
		| "authenticationManager".  Most deployers will be able to use the default AuthenticationManager
		| implementation and so do not need to change the class of this bean.  We include the whole
		| AuthenticationManager here in the userConfigContext.xml so that you can see the things you will
		| need to change in context.
		+-->
		

 

		
		<bean id="authenticationManager"
		class="org.jasig.cas.authentication.AuthenticationManagerImpl">
		 
		<property name="credentialsToPrincipalResolvers">
			<list>
				 
				<bean
					class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" >
					<property name="attributeRepository" >
					<ref local="attributeRepository"/>
					</property> 
				</bean>
			 
				<bean
					class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
			</list>
		</property>

		 
		<property name="authenticationHandlers">
			<list>
				 
				<bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" />
				 
 
					
					<bean class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
						<property name="dataSource" ref="dataSource"/>
						<property name="sql" value="select t.user_pwd from t_base_user t where  LOWER(t.user_code) = LOWER(?)"/>
						<property name="passwordEncoder" ref="MD5PasswordEncoder"/>
						<property name="userManager" ref="portal.userManagerImpl"></property>
					</bean>
					
			</list>
		</property>
	</bean>
 

	 
	 
<!-- oracle数据库验证数据源配置 -->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver">
		</property>

		 <property name="url" value="jdbc:oracle:thin:@192.168.111.238:1521:testdata"/> 

		<property name="username" value="portal"></property>
		<property name="password" value="portal"></property>
	
	</bean>
<!-- MD5算法加密工具类 -->
	<bean id="MD5PasswordEncoder" class="com.gzeport.casserver.Md5PwdEncoder"/>
		
		<bean id="sessionFactory1"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource1" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.Oracle9Dialect
				</prop>
<!--				 <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
  				<prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
			</props>
		</property>
	
		<property name="packagesToScan">
			<list>
				<value>com.gzeport.casserver.pojo</value>
			</list>
		</property>
	
	</bean>

<!--	 配置事务管理器bean,使用HibernateTransactionManager事务管理器 -->
	<tx:annotation-driven transaction-manager="txMgr" />
	<bean id="txMgr"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
<!--		 为事务管理器注入sessionFactory" -->
		<property name="sessionFactory" ref="sessionFactory1" />
	</bean>

<!--	 配置事务拦截器Bean -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
<!--		 为事务拦截器bean注入一个事物管理器 -->
		<property name="transactionManager" ref="txMgr"></property>
		<property name="transactionAttributes">
<!--			 定义事务传播属性 -->
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="find*">PROPAGATION_REQUIRED</prop>
				<prop key="load*">PROPAGATION_REQUIRED</prop>
				<prop key="change*">PROPAGATION_REQUIRED</prop>
				<prop key="void*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<!--
	This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
	More robust deployments will want to use another option, such as the Jdbc version.
	
	The name of this should remain "userDetailsService" in order for Spring Security to find it.
	 -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

    <sec:user-service id="userDetailsService">
        <sec:user name="admin" password="admin" authorities="ROLE_ADMIN" />
    </sec:user-service>
	
	<!-- 
	Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
	may go against a database or LDAP server.  The id should remain "attributeRepository" though.
	
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao">
		<property name="backingMap">
			<map>
				<entry key="uid" value="uid" />
				<entry key="eduPersonAffiliation" value="eduPersonAffiliation" /> 
				<entry key="groupMembership" value="groupMembership" />
			</map>
		</property>
	</bean>
	 -->

<!--			value="select id as UId, password_hint as ph from userInfo where username=? and enabled=true" -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
		
		<constructor-arg index="0" ref="dataSource" />
		<constructor-arg index="1"
			value="select t.user_code,t.user_id,t.company_id from t_base_user t where  LOWER(t.user_code) = LOWER(?)"
			/>
			
		<property name="queryAttributeMapping">
			<map>
				<entry key="username" value="user_code" />
				<!--
					这里必须这么写，系统会自己匹配，貌似和where语句后面的用户名字段的拼写没有什么关系
				-->
			</map>
		</property>
		<!-- 要获取的属性在这里配置 -->
		<property name="resultAttributeMapping">
			<map>
				<entry key="user_code" value="username" /> <!-- key为对应的数据库字段名称，value为提供给客户端获取的属性名字，系统会自动填充值 -->
				<entry key="user_id" value="userid" /> 
				<entry key="company_id" value="companyid"/>
			</map>
		</property>
	</bean> 
	
	<!-- 
	Sample, in-memory data store for the ServiceRegistry. A real implementation
	would probably want to replace this with the JPA-backed ServiceRegistry DAO
	The name of this bean should remain "serviceRegistryDao".
	 -->
	<bean
		id="serviceRegistryDao"
        class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
           <!--  <property name="registeredServices">
              <list>
                    <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                        <property name="id" value="0" />
                        <property name="name" value="HTTP" />
                        <property name="description" value="Only Allows HTTP Urls" />
                        <property name="serviceId" value="http://**" />
                        <property name="evaluationOrder" value="10000001" />
                    </bean>

                    <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                        <property name="id" value="1" />
                        <property name="name" value="HTTPS" />
                        <property name="description" value="Only Allows HTTPS Urls" />
                        <property name="serviceId" value="https://**" />
                        <property name="evaluationOrder" value="10000002" />
                    </bean>

                    <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                        <property name="id" value="2" />
                        <property name="name" value="IMAPS" />
                        <property name="description" value="Only Allows HTTPS Urls" />
                        <property name="serviceId" value="imaps://**" />
                        <property name="evaluationOrder" value="10000003" />
                    </bean>

                    <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                        <property name="id" value="3" />
                        <property name="name" value="IMAP" />
                        <property name="description" value="Only Allows IMAP Urls" />
                        <property name="serviceId" value="imap://**" />
                        <property name="evaluationOrder" value="10000004" />
                    </bean>
                </list> 
            </property>-->
        </bean>

    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
</beans>
